diff --git a/libraries/ESP8266WiFi/src/ESP8266WiFiMulti.cpp b/libraries/ESP8266WiFi/src/ESP8266WiFiMulti.cpp
index 23b82e6..ffbad7d 100644
--- a/libraries/ESP8266WiFi/src/ESP8266WiFiMulti.cpp
+++ b/libraries/ESP8266WiFi/src/ESP8266WiFiMulti.cpp
@@ -55,13 +55,13 @@ wl_status_t ESP8266WiFiMulti::run(void) {
             uint8 bestBSSID[6];
             int32_t bestChannel;
 
-            DEBUG_WIFI_MULTI("[WIFI] scan done\n");
+            DEBUG_WIFI_MULTI("[WIFI] scan done\n\r");
             delay(0);
 
             if(scanResult <= 0) {
-                DEBUG_WIFI_MULTI("[WIFI] no networks found\n");
+                DEBUG_WIFI_MULTI("[WIFI] no networks found\n\r");
             } else {
-                DEBUG_WIFI_MULTI("[WIFI] %d networks found\n", scanResult);
+                DEBUG_WIFI_MULTI("[WIFI] %d networks found\n\r", scanResult);
                 for(int8_t i = 0; i < scanResult; ++i) {
 
                     String ssid_scan;
@@ -97,7 +97,7 @@ wl_status_t ESP8266WiFiMulti::run(void) {
                         DEBUG_WIFI_MULTI("      ");
                     }
 
-                    DEBUG_WIFI_MULTI(" %d: [%d][%02X:%02X:%02X:%02X:%02X:%02X] %s (%d) %c\n", i, chan_scan, BSSID_scan[0], BSSID_scan[1], BSSID_scan[2], BSSID_scan[3], BSSID_scan[4], BSSID_scan[5], ssid_scan.c_str(), rssi_scan, (sec_scan == ENC_TYPE_NONE) ? ' ' : '*');
+                    DEBUG_WIFI_MULTI(" %d: [%d][%02X:%02X:%02X:%02X:%02X:%02X] %s (%d) %c\n\r", i, chan_scan, BSSID_scan[0], BSSID_scan[1], BSSID_scan[2], BSSID_scan[3], BSSID_scan[4], BSSID_scan[5], ssid_scan.c_str(), rssi_scan, (sec_scan == ENC_TYPE_NONE) ? ' ' : '*');
                     delay(0);
                 }
             }
@@ -105,11 +105,11 @@ wl_status_t ESP8266WiFiMulti::run(void) {
             // clean up ram
             WiFi.scanDelete();
 
-            DEBUG_WIFI_MULTI("\n\n");
+            DEBUG_WIFI_MULTI("\n\r");
             delay(0);
 
             if(bestNetwork.ssid) {
-                DEBUG_WIFI_MULTI("[WIFI] Connecting BSSID: %02X:%02X:%02X:%02X:%02X:%02X SSID: %s Channal: %d (%d)\n", bestBSSID[0], bestBSSID[1], bestBSSID[2], bestBSSID[3], bestBSSID[4], bestBSSID[5], bestNetwork.ssid, bestChannel, bestNetworkDb);
+                DEBUG_WIFI_MULTI("[WIFI] Connecting BSSID: %02X:%02X:%02X:%02X:%02X:%02X SSID: %s Channal: %d (%d)\n\r", bestBSSID[0], bestBSSID[1], bestBSSID[2], bestBSSID[3], bestBSSID[4], bestBSSID[5], bestNetwork.ssid, bestChannel, bestNetworkDb);
 
                 WiFi.begin(bestNetwork.ssid, bestNetwork.passphrase, bestChannel, bestBSSID);
                 status = WiFi.status();
@@ -126,31 +126,31 @@ wl_status_t ESP8266WiFiMulti::run(void) {
                     case WL_CONNECTED:
                         ip = WiFi.localIP();
                         mac = WiFi.BSSID();
-                        DEBUG_WIFI_MULTI("[WIFI] Connecting done.\n");
-                        DEBUG_WIFI_MULTI("[WIFI] SSID: %s\n", WiFi.SSID());
-                        DEBUG_WIFI_MULTI("[WIFI] IP: %d.%d.%d.%d\n", ip[0], ip[1], ip[2], ip[3]);
-                        DEBUG_WIFI_MULTI("[WIFI] MAC: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
-                        DEBUG_WIFI_MULTI("[WIFI] Channel: %d\n", WiFi.channel());
+                        DEBUG_WIFI_MULTI("[WIFI] Connecting done.\n\r");
+                        DEBUG_WIFI_MULTI("[WIFI] SSID: %s\n\r", WiFi.SSID().c_str());
+                        DEBUG_WIFI_MULTI("[WIFI] IP: %d.%d.%d.%d\n\r", ip[0], ip[1], ip[2], ip[3]);
+                        DEBUG_WIFI_MULTI("[WIFI] MAC: %02X:%02X:%02X:%02X:%02X:%02X\n\r", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+                        DEBUG_WIFI_MULTI("[WIFI] Channel: %d\n\r", WiFi.channel());
                         break;
                     case WL_NO_SSID_AVAIL:
-                        DEBUG_WIFI_MULTI("[WIFI] Connecting Failed AP not found.\n");
+                        DEBUG_WIFI_MULTI("[WIFI] Connecting Failed AP not found.\n\r");
                         break;
                     case WL_CONNECT_FAILED:
-                        DEBUG_WIFI_MULTI("[WIFI] Connecting Failed.\n");
+                        DEBUG_WIFI_MULTI("[WIFI] Connecting Failed.\n\r");
                         break;
                     default:
-                        DEBUG_WIFI_MULTI("[WIFI] Connecting Failed (%d).\n", status);
+                        DEBUG_WIFI_MULTI("[WIFI] Connecting Failed (%d).\n\r", status);
                         break;
                 }
             } else {
-                DEBUG_WIFI_MULTI("[WIFI] no matching wifi found!\n");
+                DEBUG_WIFI_MULTI("[WIFI] no matching wifi found!\n\r");
             }
         } else {
             // start scan
-            DEBUG_WIFI_MULTI("[WIFI] delete old wifi config...\n");
+            DEBUG_WIFI_MULTI("[WIFI] delete old wifi config...\n\r");
             WiFi.disconnect();
 
-            DEBUG_WIFI_MULTI("[WIFI] start scan\n");
+            DEBUG_WIFI_MULTI("[WIFI] start scan\n\r");
             // scan wifi async mode
             WiFi.scanNetworks(true);
         }
@@ -166,34 +166,34 @@ bool ESP8266WiFiMulti::APlistAdd(const char* ssid, const char *passphrase) {
 
     if(!ssid || *ssid == 0x00 || strlen(ssid) > 31) {
         // fail SSID to long or missing!
-        DEBUG_WIFI_MULTI("[WIFI][APlistAdd] no ssid or ssid to long\n");
+        DEBUG_WIFI_MULTI("[WIFI][APlistAdd] no ssid or ssid to long\n\r");
         return false;
     }
 
     if(passphrase && strlen(passphrase) > 63) {
         // fail passphrase to long!
-        DEBUG_WIFI_MULTI("[WIFI][APlistAdd] passphrase to long\n");
+        DEBUG_WIFI_MULTI("[WIFI][APlistAdd] passphrase to long\n\r");
         return false;
     }
 
     newAP.ssid = strdup(ssid);
 
     if(!newAP.ssid) {
-        DEBUG_WIFI_MULTI("[WIFI][APlistAdd] fail newAP.ssid == 0\n");
+        DEBUG_WIFI_MULTI("[WIFI][APlistAdd] fail newAP.ssid == 0\n\r");
         return false;
     }
 
     if(passphrase && *passphrase != 0x00) {
         newAP.passphrase = strdup(passphrase);
         if(!newAP.passphrase) {
-            DEBUG_WIFI_MULTI("[WIFI][APlistAdd] fail newAP.passphrase == 0\n");
+            DEBUG_WIFI_MULTI("[WIFI][APlistAdd] fail newAP.passphrase == 0\n\r");
             free(newAP.ssid);
             return false;
         }
     }
 
     APlist.push_back(newAP);
-    DEBUG_WIFI_MULTI("[WIFI][APlistAdd] add SSID: %s\n", newAP.ssid);
+    DEBUG_WIFI_MULTI("[WIFI][APlistAdd] add SSID: %s\n\r", newAP.ssid);
     return true;
 }
 
diff --git a/libraries/ESP8266WiFi/src/ESP8266WiFiMulti.h b/libraries/ESP8266WiFi/src/ESP8266WiFiMulti.h
index 63c180c..5c1b64d 100644
--- a/libraries/ESP8266WiFi/src/ESP8266WiFiMulti.h
+++ b/libraries/ESP8266WiFi/src/ESP8266WiFiMulti.h
@@ -32,7 +32,7 @@
 #undef max
 #include <vector>
 
-//#define DEBUG_WIFI_MULTI(...) Serial1.printf( __VA_ARGS__ )
+#define DEBUG_WIFI_MULTI(...) Serial.printf( __VA_ARGS__ )
 
 #ifndef DEBUG_WIFI_MULTI
 #define DEBUG_WIFI_MULTI(...)
diff --git a/libraries/ESP8266httpUpdate/src/ESP8266httpUpdate.cpp b/libraries/ESP8266httpUpdate/src/ESP8266httpUpdate.cpp
index 785258d..ad5a8a4 100644
--- a/libraries/ESP8266httpUpdate/src/ESP8266httpUpdate.cpp
+++ b/libraries/ESP8266httpUpdate/src/ESP8266httpUpdate.cpp
@@ -121,26 +121,26 @@ t_httpUpdate_return ESP8266HTTPUpdate::handleUpdate(HTTPClient * http, const cha
     int len = http->getSize();
 
     if(code <= 0) {
-        DEBUG_HTTP_UPDATE("[httpUpdate] HTTP error: %s\n", http->errorToString(code).c_str());
+        DEBUG_HTTP_UPDATE("[httpUpdate] HTTP error: %s\n\r", http->errorToString(code).c_str());
         http->end();
         return HTTP_UPDATE_FAILED;
     }
 
-    DEBUG_HTTP_UPDATE("[httpUpdate] Header read fin.\n");
-    DEBUG_HTTP_UPDATE("[httpUpdate] Server header:\n");
-    DEBUG_HTTP_UPDATE("[httpUpdate]  - code: %d\n", code);
-    DEBUG_HTTP_UPDATE("[httpUpdate]  - len: %d\n", len);
+    DEBUG_HTTP_UPDATE("[httpUpdate] Header read fin.\n\r");
+    DEBUG_HTTP_UPDATE("[httpUpdate] Server header:\n\r");
+    DEBUG_HTTP_UPDATE("[httpUpdate]  - code: %d\n\r", code);
+    DEBUG_HTTP_UPDATE("[httpUpdate]  - len: %d\n\r", len);
 
     if(http->hasHeader("x-MD5")) {
-        DEBUG_HTTP_UPDATE("[httpUpdate]  - MD5: %s\n", http->header("x-MD5").c_str());
+        DEBUG_HTTP_UPDATE("[httpUpdate]  - MD5: %s\n\r", http->header("x-MD5").c_str());
     }
 
-    DEBUG_HTTP_UPDATE("[httpUpdate] ESP8266 info:\n");
-    DEBUG_HTTP_UPDATE("[httpUpdate]  - free Space: %d\n", ESP.getFreeSketchSpace());
-    DEBUG_HTTP_UPDATE("[httpUpdate]  - current Sketch Size: %d\n", ESP.getSketchSize());
+    DEBUG_HTTP_UPDATE("[httpUpdate] ESP8266 info:\n\r");
+    DEBUG_HTTP_UPDATE("[httpUpdate]  - free Space: %d\n\r", ESP.getFreeSketchSpace());
+    DEBUG_HTTP_UPDATE("[httpUpdate]  - current Sketch Size: %d\n\r", ESP.getSketchSize());
 
     if(current_version && current_version[0] != 0x00) {
-        DEBUG_HTTP_UPDATE("[httpUpdate]  - current version: %s\n", current_version);
+        DEBUG_HTTP_UPDATE("[httpUpdate]  - current version: %s\n\r", current_version);
     }
 
     switch(code) {
@@ -150,12 +150,12 @@ t_httpUpdate_return ESP8266HTTPUpdate::handleUpdate(HTTPClient * http, const cha
                 if(spiffs) {
                     size_t spiffsSize = ((size_t) &_SPIFFS_end - (size_t) &_SPIFFS_start);
                     if(len > (int) spiffsSize) {
-                        DEBUG_HTTP_UPDATE("[httpUpdate] spiffsSize to low (%d) needed: %d\n", spiffsSize, len);
+                        DEBUG_HTTP_UPDATE("[httpUpdate] spiffsSize to low (%d) needed: %d\n\r", spiffsSize, len);
                         startUpdate = false;
                     }
                 } else {
                     if(len > (int) ESP.getFreeSketchSpace()) {
-                        DEBUG_HTTP_UPDATE("[httpUpdate] FreeSketchSpace to low (%d) needed: %d\n", ESP.getFreeSketchSpace(), len);
+                        DEBUG_HTTP_UPDATE("[httpUpdate] FreeSketchSpace to low (%d) needed: %d\n\r", ESP.getFreeSketchSpace(), len);
                         startUpdate = false;
                     }
                 }
@@ -175,15 +175,15 @@ t_httpUpdate_return ESP8266HTTPUpdate::handleUpdate(HTTPClient * http, const cha
 
                     if(spiffs) {
                         command = U_SPIFFS;
-                        DEBUG_HTTP_UPDATE("[httpUpdate] runUpdate spiffs...\n");
+                        DEBUG_HTTP_UPDATE("[httpUpdate] runUpdate spiffs...\n\r");
                     } else {
                         command = U_FLASH;
-                        DEBUG_HTTP_UPDATE("[httpUpdate] runUpdate flash...\n");
+                        DEBUG_HTTP_UPDATE("[httpUpdate] runUpdate flash...\n\r");
                     }
 
                     if(runUpdate(*tcp, len, http->header("x-MD5"), command)) {
                         ret = HTTP_UPDATE_OK;
-                        DEBUG_HTTP_UPDATE("[httpUpdate] Update ok\n");
+                        DEBUG_HTTP_UPDATE("[httpUpdate] Update ok\n\r");
                         http->end();
 
                         if(reboot) {
@@ -192,12 +192,12 @@ t_httpUpdate_return ESP8266HTTPUpdate::handleUpdate(HTTPClient * http, const cha
 
                     } else {
                         ret = HTTP_UPDATE_FAILED;
-                        DEBUG_HTTP_UPDATE("[httpUpdate] Update failed\n");
+                        DEBUG_HTTP_UPDATE("[httpUpdate] Update failed\n\r");
                     }
                 }
             } else {
                 ret = HTTP_UPDATE_FAILED;
-                DEBUG_HTTP_UPDATE("[httpUpdate] Content-Length is 0 or not set by Server?!\n");
+                DEBUG_HTTP_UPDATE("[httpUpdate] Content-Length is 0 or not set by Server?!\n\r");
             }
             break;
         case HTTP_CODE_NOT_MODIFIED:
@@ -206,7 +206,7 @@ t_httpUpdate_return ESP8266HTTPUpdate::handleUpdate(HTTPClient * http, const cha
             break;
         default:
             ret = HTTP_UPDATE_FAILED;
-            DEBUG_HTTP_UPDATE("[httpUpdate] HTTP Code is (%d)\n", code);
+            DEBUG_HTTP_UPDATE("[httpUpdate] HTTP Code is (%d)\n\r", code);
             //http->writeToStream(&Serial1);
             break;
     }
@@ -231,7 +231,7 @@ bool ESP8266HTTPUpdate::runUpdate(Stream& in, uint32_t size, String md5, int com
     if(!Update.begin(size, command)) {
         Update.printError(error);
         error.trim(); // remove line ending
-        DEBUG_HTTP_UPDATE("[httpUpdate] Update.begin failed! (%s)\n", error.c_str());
+        DEBUG_HTTP_UPDATE("[httpUpdate] Update.begin failed! (%s)\n\r", error.c_str());
         return false;
     }
 
@@ -242,14 +242,14 @@ bool ESP8266HTTPUpdate::runUpdate(Stream& in, uint32_t size, String md5, int com
     if(Update.writeStream(in) != size) {
         Update.printError(error);
         error.trim(); // remove line ending
-        DEBUG_HTTP_UPDATE("[httpUpdate] Update.writeStream failed! (%s)\n", error.c_str());
+        DEBUG_HTTP_UPDATE("[httpUpdate] Update.writeStream failed! (%s)\n\r", error.c_str());
         return false;
     }
 
     if(!Update.end()) {
         Update.printError(error);
         error.trim(); // remove line ending
-        DEBUG_HTTP_UPDATE("[httpUpdate] Update.end failed! (%s)\n", error.c_str());
+        DEBUG_HTTP_UPDATE("[httpUpdate] Update.end failed! (%s)\n\r", error.c_str());
         return false;
     }
 
